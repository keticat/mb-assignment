/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swingdemo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

/**
 *
 * @author Cathy
 */
public class Address extends javax.swing.JFrame {
    
    private final String customerId;
    private final String shortName;
    private final String fullName;
    private String addressId;
    
    // DB connection
    private final String url = "jdbc:mysql://localhost:3306/maybank";
    private final String user = "root";
    private final String password = "P@ssw0rd888";
    private final String jdbcDriver = "com.mysql.cj.jdbc.Driver";

    /**
     * Creates new form Address
     */
    public Address(String customerId, String shortName, String fullName) {
        this.customerId = customerId;
        this.shortName = shortName;
        this.fullName = fullName;
        initComponents();
        setCustomerFields();
        loadAddress();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idLabel = new javax.swing.JLabel();
        shortNameLabel = new javax.swing.JLabel();
        fullNameLabel = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        shortNameTextField = new javax.swing.JTextField();
        fullNameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        addressTable = new javax.swing.JTable();
        addLine1Label = new javax.swing.JLabel();
        addLine2Label = new javax.swing.JLabel();
        addLine3 = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        postCodeLabel = new javax.swing.JLabel();
        addLine1TextField = new javax.swing.JTextField();
        addLine2TextField = new javax.swing.JTextField();
        addLine3TextField = new javax.swing.JTextField();
        cityTextField = new javax.swing.JTextField();
        postCodeTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Address");

        idLabel.setText("Customer ID");

        shortNameLabel.setText("Short Name");

        fullNameLabel.setText("Full Name");

        idTextField.setEditable(false);

        shortNameTextField.setEditable(false);

        fullNameTextField.setEditable(false);

        addressTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Address Line1", "Address Line2", "Address Line3", "City", "Postal Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(addressTable);

        addLine1Label.setText("Address Line1");

        addLine2Label.setText("Address Line2");

        addLine3.setText("Address Line3");

        cityLabel.setText("City");

        postCodeLabel.setText("Postal Code");

        exitButton.setText("Back");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(exitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(saveButton)
                    .addComponent(deleteButton)
                    .addComponent(clearButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel)
                            .addComponent(shortNameLabel)
                            .addComponent(fullNameLabel))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(idTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shortNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fullNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addLine2Label)
                    .addComponent(addLine1Label)
                    .addComponent(addLine3)
                    .addComponent(cityLabel)
                    .addComponent(postCodeLabel))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addLine2TextField)
                    .addComponent(addLine1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addLine3TextField)
                    .addComponent(cityTextField)
                    .addComponent(postCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(idTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shortNameLabel)
                    .addComponent(shortNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullNameLabel)
                    .addComponent(fullNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLine1Label)
                    .addComponent(addLine1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLine2Label)
                    .addComponent(addLine2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLine3)
                    .addComponent(addLine3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityLabel)
                    .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postCodeLabel)
                    .addComponent(postCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        setVisible(false);
        new Customer().setVisible(true);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearAddressFields();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        boolean isValid = true;

        // do validation
        
        if (null == addressId || addressId.isEmpty()) isValid = doValidateLimit();
       
        if (isValid) isValid = doValidatePostCode();

        if (isValid){
            try {
                
                Class.forName(jdbcDriver);
                Connection connection = (Connection) DriverManager.getConnection(url, user, password);
                int res = 0;
                
                if (null == addressId || addressId.isEmpty()){
                    // insert
                    PreparedStatement statement = (PreparedStatement) connection
                        .prepareStatement("insert into address (customerid, addressline1, addressline2, addressline3, city, postcode) values (?, ?, ?, ?, ?, ?)");

                    statement.setInt(1, Integer.parseInt(customerId));
                    statement.setString(2, addLine1TextField.getText());
                    statement.setString(3, addLine2TextField.getText());
                    statement.setString(4, addLine3TextField.getText());
                    statement.setString(5, cityTextField.getText());
                    statement.setString(6, postCodeTextField.getText());

                    res = statement.executeUpdate();
                    System.out.println(res + " records inserted");

                    statement.close();

                } else {
                    // update

                    PreparedStatement statement = (PreparedStatement) connection
                        .prepareStatement("update address set addressline1 = ?, addressline2 = ?, addressline3 = ?, city = ?, postcode = ? where addressid = ?");

                    statement.setString(1, addLine1TextField.getText());
                    statement.setString(2, addLine2TextField.getText());
                    statement.setString(3, addLine3TextField.getText());
                    statement.setString(4, cityTextField.getText());
                    statement.setString(5, postCodeTextField.getText());
                    statement.setInt(6, Integer.parseInt(addressId));

                    res = statement.executeUpdate();
                    System.out.println(res + " records updated");

                    statement.close();
                    
                }
                
                connection.close();
                
                if (res > 0) {
                    // refresh table
                    clearAddressFields();
                    loadAddress();
                }
            
            } catch (Exception exception) {
                System.out.println(exception);
            }
        
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
                
            Class.forName(jdbcDriver);
            Connection connection = (Connection) DriverManager.getConnection(url, user, password);
            int res = 0;

            if (null != addressId && !addressId.isEmpty()){

                PreparedStatement statement = (PreparedStatement) connection
                    .prepareStatement("delete from address where addressid = ?");

                statement.setInt(1, Integer.parseInt(addressId));

                res = statement.executeUpdate();
                System.out.println(res + " records deleted");

                statement.close();

            }

            connection.close();

            if (res > 0) {
                // refresh table
                clearAddressFields();
                loadAddress();
            }

        } catch (Exception exception) {
            System.out.println(exception);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private boolean doValidatePostCode(){
        
        // post code must be numeric
        if (postCodeTextField.getText().matches("[0-9][0-9][0-9][0-9][0-9]")) return true;
        
        JOptionPane.showMessageDialog(null,
            "Postal Code must be numeric with 5 digits",
            "Message",
            JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    private boolean doValidateLimit(){
        
        // get number of rows in the table 
        
        DefaultTableModel model = (DefaultTableModel) addressTable.getModel();
        if (model.getRowCount() < 3) return true;
        
        JOptionPane.showMessageDialog(null,
            "Maximum of 3 address only",
            "Message",
            JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    private void setCustomerFields() {
        idTextField.setText(customerId);
        shortNameTextField.setText(shortName);
        fullNameTextField.setText(fullName);
    }
    
    private void clearAddressFields() {
        setAddressFields("", "", "", "", "", "");
        addressTable.clearSelection();
    }
    
    private void setAddressFields(String addressId, String addLine1, String addLine2, String addLine3, String city, String postCode) {
        this.addressId = addressId;
        addLine1TextField.setText(addLine1);
        addLine2TextField.setText(addLine2);
        addLine3TextField.setText(addLine3);
        cityTextField.setText(city);
        postCodeTextField.setText(postCode);
    }
    
    private void loadAddress(){
        DefaultTableModel model = (DefaultTableModel) addressTable.getModel();
        
        System.out.println("model.getRowCount() = " + model.getRowCount());
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        try {
            Class.forName(jdbcDriver);
            Connection connection = (Connection) DriverManager.getConnection(url, user, password);

            PreparedStatement statement = (PreparedStatement) connection
                .prepareStatement("select addressid, customerid, addressline1, addressline2, addressline3, city, postcode from address where customerid = ?");
            
            statement.setInt(1, Integer.parseInt(customerId));
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                System.out.println("address ID = " + resultSet.getInt("addressid"));
                
                Object[] row = { resultSet.getInt("addressid"), resultSet.getString("addressline1").trim(), resultSet.getString("addressline2").trim(), 
                                resultSet.getString("addressline3").trim(), resultSet.getString("city").trim(), resultSet.getString("postcode").trim() };

                model.addRow(row);
            }
            
            resultSet.close();
            statement.close();
            connection.close();

            ListSelectionModel listSelectionModel = addressTable.getSelectionModel();
            listSelectionModel.addListSelectionListener(new ListSelectionHandler());
            addressTable.setSelectionModel(listSelectionModel);
            
        } catch (Exception exception) {
            System.out.println(exception);
        }
        
    }
    
    class ListSelectionHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();
            
            if(!lsm.isSelectionEmpty()) {
                int index = lsm.getMinSelectionIndex();
                
                setAddressFields(addressTable.getValueAt(index, 0).toString(),
                                addressTable.getValueAt(index, 1).toString(), 
                                addressTable.getValueAt(index, 2).toString(), 
                                addressTable.getValueAt(index, 3).toString(),
                                addressTable.getValueAt(index, 4).toString(),
                                addressTable.getValueAt(index, 5).toString());
                
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addLine1Label;
    private javax.swing.JTextField addLine1TextField;
    private javax.swing.JLabel addLine2Label;
    private javax.swing.JTextField addLine2TextField;
    private javax.swing.JLabel addLine3;
    private javax.swing.JTextField addLine3TextField;
    private javax.swing.JTable addressTable;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel fullNameLabel;
    private javax.swing.JTextField fullNameTextField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel postCodeLabel;
    private javax.swing.JTextField postCodeTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel shortNameLabel;
    private javax.swing.JTextField shortNameTextField;
    // End of variables declaration//GEN-END:variables
}
